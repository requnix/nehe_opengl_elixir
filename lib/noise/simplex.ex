defmodule Noise.Simplex do
  @moduledoc "Simplex noise algorithm."

  use Bitwise

  @f2 0.5
  @g2 0.25

  @f3 1 / 3
  @g3 1 / 6

  @lut_mask 127

  @grad2d {
    {0.465254262011416, -0.885177084927198}, {0.999814701091156, -0.0192500255065206}, {0.562013227349949, 0.827128244157878}, {0.540531763173497, -0.841323607775599},
    {-0.97869393624958, 0.20532457024989}, {-0.022259068317433, 0.999752236245381}, {-0.763453105361241, -0.645863264100288}, {-0.877652307360767, 0.479297848299283},
    {-0.429945697678765, 0.902854748587789}, {-0.880336026899474, 0.474350587374832}, {-0.999734062007074, 0.0230609033395389}, {0.961877124516138, -0.273481987217745},
    {0.485111864938318, 0.874452101887844}, {-0.307899752943979, 0.951418804805243}, {-0.991765219175154, 0.128069317303008}, {0.937814305853532, -0.347137332674633},
    {-0.398552509901734, -0.917145515635893}, {0.701222178891205, -0.712942813857514}, {0.873193936119955, 0.487372906431349}, {-0.514304676201594, -0.857607544298191},
    {0.0428414754286589, 0.999081882521696}, {-0.88038067821201, 0.474267710719338}, {0.14177264550869, 0.989899245875795}, {-0.887664663265946, -0.46049044027966},
    {0.999983713358517, -0.00570727760945115}, {-0.623600504016441, -0.781743187620104}, {0.888019464508127, -0.459805861918592}, {0.600087177175954, -0.79993460969569},
    {-0.560441030370991, 0.828194331951567}, {0.958552181052623, -0.284917033887514}, {0.6683586377581, 0.743839183785136}, {0.709718808827001, 0.704485068966819},
    {0.695776987881928, 0.718257880662615}, {0.154316110318401, -0.988021527142096}, {-0.725364342269412, -0.688365143629501}, {-0.999918869545931, 0.0127379090116007},
    {0.805508244111792, 0.592584566680519}, {-0.996506623245929, 0.0835137702836865}, {-0.73969279786535, -0.67294469667732}, {0.695504007775371, -0.718522216196824},
    {-0.999983227160896, 0.00579183881678425}, {-0.714924640549655, 0.699201514825981}, {-0.835103934916504, -0.550092190352645}, {0.84959050330652, 0.527442865807639},
    {-0.171610706906682, 0.985164841676249}, {0.3561994988697, 0.934409929851441}, {-0.409182557485348, -0.912452538299801}, {0.463529807851185, 0.886081326534672},
    {-0.962925769084928, -0.269766497608949}, {0.744285209959416, 0.66786190656128}, {-0.691027420259623, 0.722828544296177}, {0.981612661017864, 0.190883691627725},
    {0.928340009081787, 0.371732198683444}, {-0.120562843572988, 0.992705696946278}, {0.789437446513116, -0.61383101749818}, {0.999774655712189, -0.0212282310985648},
    {-0.902267580211854, 0.431176545858708}, {-0.912180652347305, -0.4097883081339}, {-0.770294485489921, -0.637688329533965}, {0.20063205075057, 0.979666667908846},
    {-0.982785937329741, -0.184747940142514}, {0.857295252061123, -0.514825068147866}, {-0.6880675701609, -0.725646621223357}, {0.703885918434739, -0.710313039320893},
    {0.80736694412922, -0.590049673779628}, {0.501306939228223, -0.865269526033149}, {0.994382489412099, -0.105846420584718}, {0.496494368044017, -0.868039942917705},
    {0.077642279257408, -0.996981281906393}, {0.951970808735996, -0.30618879684687}, {-0.761381916275718, -0.648303615267041}, {0.925704511866975, 0.378247480770363},
    {0.307462004306155, 0.951560358520699}, {-0.722833511616144, -0.6910222243059}, {0.365487416741135, -0.930816280585966}, {-0.452581511359919, 0.891723037481466},
    {-0.696052038963733, -0.717991336336609}, {-0.731589205376628, -0.681745725748533}, {-0.584030912612065, 0.811731416857521}, {-0.622817071437575, -0.782367493909303},
    {-0.250124556053565, -0.968213667771224}, {-0.972374793807189, -0.233425063710878}, {-0.970811073944879, 0.239845489234194}, {0.972096169972212, -0.234582685476477},
    {-0.56398693111627, -0.825783713529185}, {-0.697050386134155, 0.717022146931478}, {-0.0346220968223854, -0.999400475490992}, {-0.218763172462792, -0.975777984161364},
    {-0.526228595935678, 0.850343145335791}, {0.878475471267297, 0.477787448957902}, {-0.543258510315468, 0.839565477476188}, {-0.424638392098636, 0.905363040970795},
    {-0.511241626148254, -0.859437024855975}, {0.310536598007565, -0.950561424263518}, {0.647207900842245, 0.762313539881967}, {-0.998374197564832, 0.0569996634795082},
    {-0.384499699032222, 0.923125116895933}, {0.793017652527103, -0.609198656252953}, {-0.108016962369769, 0.994149051118799}, {-0.931126682943364, 0.364695901143526},
    {-0.801286360381044, -0.598281011454734}, {0.875902620980454, -0.482487925817394}, {-0.731473336626206, 0.681870044660216}, {-0.315759562725525, -0.948839237461956},
    {-0.0770741115938651, -0.997025366438596}, {-0.822418334736048, 0.568883188967635}, {-0.998852401248829, -0.0478944727442276}, {0.996841343178929, -0.0794187416749304},
    {-0.632437179039341, 0.774611654036241}, {0.719989390873874, 0.693985069745068}, {0.99256596306396, -0.121707883750037}, {0.851153933233715, -0.524916166583558},
    {0.952866133004913, 0.303391055524489}, {0.983070281370671, 0.183228878416556}, {0.751614346163695, 0.659602815822462}, {0.549915829679874, 0.83522007894177},
    {0.529779603383605, 0.8481353499523}, {-0.738299650910558, -0.67447285005799}, {-0.888225309084572, -0.459408097775406}, {0.69138401830353, 0.722487466489534},
    {0.895582660271765, -0.4448951546382}, {-0.823764839572624, -0.566931644101728}, {0.481527438369519, 0.876431016165727}, {-0.393245292146023, 0.9194335974963},
    {0.511430719572624, 0.859324513252955}, {0.709782009015835, 0.704421393540433}, {-0.123429256704187, -0.992353373848979}, {-0.796333188996483, -0.60485820826264}
  }

  @grad3d {
    {0.969192790963703, -0.204588387787502, -0.137145636191962}, {0.0105050866706296, 0.869235070511719, -0.494287401565657}, {-0.00713466534361336, -0.0561560433951495, -0.998396512083569}, {-0.99998707996014, 0.00085789886042815, 0.00501038145637507}, {-0.729044421579981, -0.0724223391156089, 0.680624151907743}, {-0.769477416524206, 0.638612501748049, 0.00886442724220208}, {-0.148489274637499, -0.733777362959066, 0.662964340614538}, {0.00192647521945516, -0.688227670545063, 0.725492220626345},
    {0.307853961011481, -0.888296843306306, 0.340814695782903}, {-0.136873983993337, 0.99058218544213, 0.0035279442294635}, {0.981422965662359, 0.0873011939299262, -0.170843390299155}, {0.977985182924792, 0.0274298762917452, 0.206863684261352}, {-4.10904184278805E-08, -0.984715746607902, -0.174169165992265}, {-0.00576047279073815, -0.00207046110763061, 0.999981264896512}, {0.385796494451913, -0.382885124111844, 0.839380751865608}, {0.196898025871543, -0.533803208609833, 0.822365674068256},
    {-0.953574229510659, -0.197141111727736, -0.227665480211439}, {0.958192898763756, -0.00565943080050262, 0.286067019423289}, {-0.000021414243574488, 0.308183457620683, 0.951326944846192}, {-0.00156590253858546, -0.936777289401244, -0.349922645753741}, {0.010162930999189, 0.907036729301754, 0.420928837846829}, {-0.0468274165634939, 0.74026530347444, -0.670682095727837}, {-0.958782958606567, 0.0676203469753538, -0.275975953591197}, {0.000771226398681087, -0.963152702156633, 0.268954043543163},
    {-0.939601847652347, 0.341933173840782, -0.0151681414637957}, {0.0836248033533964, 0.431468628956066, 0.898243683245743}, {-0.97637082132863, 0.118948680332271, 0.180419596234078}, {0.103518422502263, 0.000465187240855595, -0.994627427634827}, {-0.141353740004181, 0.0778654829014707, -0.98689213532146}, {0.0700630230682292, 0.912644877864809, -0.402703985212052}, {0.991874945122624, -0.0502217417385342, 0.116884001876814}, {-0.707119760481927, 0.700142261026601, -0.0989063125414175},
    {0.0976913606831578, 0.99518571412564, -0.00786081726752686}, {0.865756754070504, 0.268594575188625, 0.422282129577546}, {0.0124864728918991, -0.922679395826772, -0.385365826859963}, {-0.0174011080646746, -0.984212730893662, 0.176132057800279}, {0.983085383617433, 0.183144250425653, 0.00114544916535278}, {0.84177325324929, -0.000849099388075524, 0.539830593005191}, {-0.773202768542597, 0.634158480426922, -0.000707404184135718}, {-0.399463762408861, 0.520122522942901, -0.754918050949683},
    {-0.0543404007696243, 0.853240000077495, -0.51867969221086}, {0.0787561128671418, -0.0445112338899157, -0.995899706167069}, {-0.149110911377271, -0.855893524471146, -0.495189065788614}, {0.128579845943545, 0.95447163354276, 0.26916746456314}, {-6.48712081276198E-06, -0.417292224145094, 0.908772358528778}, {-0.18395289837094, 0.967255425062472, 0.174866445804071}, {-0.0956465003848313, -0.995413983868259, -0.00165761384418054}, {-0.493402767926647, 0.252656257103973, 0.83229713705415},
    {0.941743815026262, -0.00313821941824732, 0.336316426061328}, {-0.406002839825049, -0.660621950516609, -0.631458892208849}, {-0.0151930656231186, 0.000118750826499392, 0.999884571665756}, {0.681786958463344, -0.719431781259153, 0.132606392695014}, {0.973323591185432, -0.228922756390528, 0.0153479134887209}, {-0.810634856852843, -0.585551171144037, 0.000977152504195713}, {-0.181398855060402, -0.831693356111209, 0.524767202465292}, {-0.733900500867695, 0.679256981569713, 8.84021970721802E-05},
    {0.271727663466327, -0.889119678670303, -0.368280156821335}, {0.298233653375395, -0.0312311598898426, -0.953981814630813}, {-0.752318728102205, -0.00392703305301813, 0.658787605953604}, {0.00665991896444102, -0.893539727653096, 0.448934739784101}, {-0.17274029679022, 0.981849574845414, 0.0783083791219516}, {0.740984319707759, -1.24163939998686E-09, 0.671522328703395}, {-0.91345982474963, 0.00101800775270491, 0.40692764986984}, {0.166118424599226, -0.966950978532905, -0.193417874362556},
    {-0.371630916510155, 0.92837704130171, -0.00255559732836468}, {0.114876798169617, 0.991537470331245, 0.0604712011738797}, {0.42509283827761, -0.861877415693766, -0.276520160498508}, {0.0914177278602429, 0.937282941514681, 0.336368081985282}, {-0.138897098096673, 0.574329772420649, -0.806754552916541}, {4.20730659972853E-05, -0.973522779481066, 0.228590017413966}, {-0.19883302527571, -0.769560727972852, -0.606829229702725}, {0.0747279815185906, 0.375429090417211, 0.92383371168553},
    {0.0360592551928224, 0.999349653582228, 1.40580077597545E-07}, {-0.630789398266975, 0.775912761477526, 0.00800759703705387}, {0.999468273136104, 0.0122075383077114, -0.0302348640281232}, {0.0234858830298487, 0.722121551769761, -0.691367397096465}, {0.044647769484317, -0.998966611124733, -0.00850214902496602}, {-0.155624581702642, 0.0567240593672596, -0.98618627584183}, {-0.564856042306962, 0.825189463979779, 2.46592673497201E-06}, {-0.00280893077197093, -0.849678682544325, 0.527293320968186},
    {0.85760478967376, 0.0912484314080345, -0.506149926893406}, {-0.983676972673489, -0.138789081908023, -0.11453036355067}, {-0.995791780173427, 0.0916344946719056, 0.00136011957614869}, {0.0705163298667096, 0.9883873876068, -0.134602448870495}, {0.151288867759186, -0.946777269461834, -0.28412053871999}, {-0.479182164834798, 2.28582795501955E-06, 0.877715473772117}, {-0.920617168247744, -0.0874211800038508, -0.380554288918466}, {0.647008224881357, -0.0116892424293656, -0.76239341454875},
    {0.00348600295131339, 0.00264876419739902, 0.999990415869897}, {0.293662611616922, 0.774229458412962, -0.560652313170918}, {-0.0230822002633608, -0.133701316157593, -0.99075282996756}, {0.0891587773276397, -0.70303221860981, -0.705546888606285}, {-0.716380181025389, -0.675240051032385, 0.175642562369752}, {-0.110229513550145, -0.0380431704478986, 0.993177814655951}, {0.901899360101853, -0.423583957873496, -0.0845823556073773}, {-0.188144760211676, 0.981876973408649, 0.0227850454193412},
    {-0.992971049488398, -0.00105311622549315, -0.118352802350111}, {0.974825103742426, -0.22297088847484, 2.51166485428216E-06}, {0.917736330268161, 0.253456586759036, -0.305810050087285}, {0.754361752313554, 0.655909079393725, -0.0268631013715986}, {-0.00493426945610691, 0.999852337890823, -0.0164607229243032}, {0.172163344055272, 0.977404359568319, -0.122639719750783}, {0.20654798485596, 0.00802290795582379, 0.978403578744413}, {-0.0189935909416278, -0.956252765802595, -0.291924461801387},
    {-0.298030174309119, -0.101625749247146, -0.949131298762838}, {-0.525057139557522, -0.851050276233871, 0.00533174661105069}, {0.00362214069523366, 0.401488407244411, -0.915856942401558}, {0.7517944143271, 0.19472711592481, 0.629989292694866}, {0.501284099317453, -0.0225214021165674, 0.864989617404853}, {-0.985033512468648, 0.1680612553394, -0.0382673982316817}, {0.00137633273570574, -0.0442369494900767, -0.999020118920542}, {-0.724166817672979, -0.688818418185576, 0.033340770082758},
    {-0.0128146550963728, -0.0397993929245446, 0.99912551410601}, {0.802033957950016, 0.595775400910827, -0.0423462154693413}, {-0.902335114745471, -0.411652900762455, -0.127801525777801}, {7.40750655087705E-05, -0.890177016591854, 0.455614830360591}, {-0.0563694832642116, 0.998393830705426, -0.00567804243293261}, {0.804825783463094, 0.0873894235068948, -0.587042202002675}, {0.902405167679558, 0.0887442050097385, -0.421650778989461}, {0.0138828478418606, -0.26021714739708, 0.965450310858268},
    {-0.0235002961872274, -0.1428517727679, -0.989465061079056}, {0.543378228613975, 0.00830368325812741, 0.839446930730399}, {-0.956960500295924, 0.0113747804839107, 0.289995198653906}, {-0.00858337504492301, -0.949962410388146, -0.312246288244364}, {-0.731827611403257, 0.00140870300297461, -0.681488343806152}, {0.844453636307317, 0.498643416559842, -0.195583228444764}, {-0.997648624781726, 0.000128342870118087, -0.0685361583343983}, {0.00700544496566235, -0.020878882722484, 0.999757468587804}
  }


  ### Public API

  @doc "Returns a scaled value at some `coords` and `circum` based on `config`."
  def cylindrical(config, circum, {x, y}) do
    nx = x / circum
    r = circum / (2 * :math.pi)
    rdx = nx * 2 * :math.pi
    a = r * :math.sin(rdx)
    b = r * :math.cos(rdx)
    get(config, {a, b, y})
  end

  @doc "Returns a scaled value at some `coords` based on `config`."
  def get(config, coords) do
    init_acc = %{
      amplitude: config.amplitude,
      frequency: config.frequency,
      max_amplitude: 0,
      noise: 0
    }

    value = Enum.reduce(1..config.octaves, init_acc, fn(_octave, acc) ->
      noise = raw(config.seed, increase(acc.frequency, coords))
      %{
        amplitude: acc.amplitude * config.persistence,
        frequency: acc.frequency * 2,
        max_amplitude: acc.max_amplitude + acc.amplitude,
        noise: acc.noise + acc.amplitude * noise
      }
    end)

    config.scale.(value.noise / value.max_amplitude)
  end

  @doc "Returns a new config map used to generate an adjusted noise field."
  def new_config(options \\ %{}) do
    min = Map.get(options, :minimum, -1.0)
    max = Map.get(options, :maximum, 1.0)

    %{
      amplitude: Map.get(options, :amplitude, 1.0),
      frequency: Map.get(options, :frequency, 1.0),
      octaves: Map.get(options, :octaves, 1),
      persistence: Map.get(options, :persistence, 0.5),
      scale: fn(value) -> value * (max - min) / 2 + (max + min) / 2 end,
      seed: Map.get(options, :seed, :rand.uniform(trunc(1.0e308)))
    }
  end

  @doc "Returns a noise value (-1, 1) at some coordinates based on `seed`."
  def raw(seed, {x, y}) do
    t = (x + y) * @f2
    {i, j} = {trunc(x + t), trunc(y + t)}

    tt = (i + j) * @g2
    {x0, y0} = {x - (i - tt), y - (j - tt)}

    {i1, j1} = if x0 > y0, do: {1, 0}, else: {0, 1}
    {x1, y1} = {x0 - i1 + @g2, y0 - j1 + @g2}
    {x2, y2} = {x0 - 1.0 + 2.0 * @g2, y0 - 1.0 + 2.0 * @g2}

    t0 = 0.6 - x0 * x0 - y0 * y0
    n0 = if t0 < 0 do
      0
    else
      :math.pow(t0, 4) * dot(gcoord(seed, i, j), x0, y0)
    end

    t1 = 0.6 - x1 * x1 - y1 * y1
    n1 = if t1 < 0 do
      0
    else
      :math.pow(t1, 4) * dot(gcoord(seed, i + i1, j + j1), x1, y1)
    end

    t2 = 0.6 - x2 * x2 - y2 * y2
    n2 = if t2 < 0 do
      0
    else
      :math.pow(t2, 4) * dot(gcoord(seed, i + 1, j + 1), x2 ,y2)
    end

    27.7 * (n0 + n1 + n2)
  end

  def raw(seed, {x, y, z}) do
    t = (x + y + z) * @f3
    {i, j, k} = {trunc(x + t), trunc(y + t), trunc(z + t)}

    tt = (i + j + k) * @g3;
    {x0, y0, z0} = {x - (i - tt), y - (j - tt), z - (k - tt)}

    {i1, j1, k1, i2, j2, k2} = if x0 >= y0 do
      if y0 >= z0 do
        {1, 0, 0, 1, 1, 0}
      else
        if x0 >= z0, do: {1, 0, 0, 1, 0, 1}, else: {0, 0, 1, 1, 0, 1}
      end
    else
      if y0 < z0 do
        {0, 0, 1, 0, 1, 1}
      else
        if x0 < z0, do: {0, 1, 0, 0, 1, 1}, else: {0, 1, 0, 1, 1, 0}
      end
    end

    x1 = x0 - i1 + @g3
    y1 = y0 - j1 + @g3
    z1 = z0 - k1 + @g3
    x2 = x0 - i2 + 2.0 * @g3
    y2 = y0 - j2 + 2.0 * @g3
    z2 = z0 - k2 + 2.0 * @g3
    x3 = x0 - 1.0 + 3.0 * @g3
    y3 = y0 - 1.0 + 3.0 * @g3
    z3 = z0 - 1.0 + 3.0 * @g3

    t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0
    n0 = if t0 < 0.0 do
      0.0
    else
      :math.pow(t0, 4) * dot(gcoord(seed, i, j, k), x0, y0, z0)
    end

    t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1
    n1 = if t1 < 0.0 do
      0.0
    else
      :math.pow(t1, 4) * dot(gcoord(seed, i + i1, j + j1, k + k1), x1, y1, z1)
    end

    t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2
    n2 = if t2 < 0.0 do
      0.0
    else
      :math.pow(t2, 4) * dot(gcoord(seed, i + i2, j + j2, k + k2), x2, y2, z2)
    end

    t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3
    n3 = if t3 < 0.0 do
      0.0
    else
      :math.pow(t3, 4) * dot(gcoord(seed, i + 1, j + 1, k + 1), x3, y3, z3)
    end

    40.0 * (n0 + n1 + n2 + n3)
  end


  ### Private API

  defp coord(seed, x, y) do
    hash = seed
    |> Bitwise.^^^(x)
    |> :erlang.*(15485863)
    |> Bitwise.^^^(y)
    |> :erlang.*(10057189)
    |> trunc

    hash ^^^ (hash >>> 16)
    |> rem(@lut_mask)
  end

  defp coord(seed, x, y, z) do
    hash = seed
    |> Bitwise.^^^(x)
    |> :erlang.*(15485863)
    |> Bitwise.^^^(y)
    |> :erlang.*(10057189)
    |> Bitwise.^^^(z)
    |> :erlang.*(987391)
    |> trunc

    hash ^^^ (hash >>> 16)
    |> rem(@lut_mask)
  end

  defp dot(g, x, y), do: elem(g, 0) * x + elem(g, 1) * y
  defp dot(g, x, y, z), do: elem(g, 0) * x + elem(g, 1) * y + elem(g, 2) * z

  defp gcoord(seed, i, j), do: elem(@grad2d, coord(seed, i, j))
  defp gcoord(seed, i, j, k), do: elem(@grad3d, coord(seed, i, j, k))

  defp increase(freq, {x, y}), do: {x * freq, y * freq}
  defp increase(freq, {x, y, z}), do: {x * freq, y * freq, z * freq}
end
